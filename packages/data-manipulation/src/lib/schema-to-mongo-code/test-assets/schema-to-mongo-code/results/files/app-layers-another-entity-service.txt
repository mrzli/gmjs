import { Injectable } from '@nestjs/common';
import { ObjectId } from 'mongodb';
import { Except } from 'type-fest';
import { objectRemoveUndefined, transformIfExists } from '@gmjs/util';
import { AppAnotherEntity, DbAnotherEntity } from '@gmjs-apps/example-shared';
import { AnotherEntityRepository } from './another-entity.repository';

@Injectable()
export class AnotherEntityService {
  public constructor(
    private readonly anotherEntityRepository: AnotherEntityRepository
  ) {}

  public async getAll(): Promise<readonly AppAnotherEntity[]> {
    const dbAnotherEntityList = await this.anotherEntityRepository.getAll();
    return dbAnotherEntityList.map(dbAnotherEntityToAppAnotherEntity);
  }

  public async getById(id: string): Promise<AppAnotherEntity | undefined> {
    const dbAnotherEntity = await this.anotherEntityRepository.getById(
      new ObjectId(id)
    );
    return transformIfExists(
      dbAnotherEntity,
      dbAnotherEntityToAppAnotherEntity,
      undefined
    );
  }

  public async create(
    appAnotherEntity: Except<AppAnotherEntity, 'id'>
  ): Promise<AppAnotherEntity> {
    const dbAnotherEntity = await this.anotherEntityRepository.create(
      appAnotherEntityToDbAnotherEntityWithoutId(appAnotherEntity)
    );
    return dbAnotherEntityToAppAnotherEntity(dbAnotherEntity);
  }

  public async update(
    id: string,
    appAnotherEntity: Partial<Except<AppAnotherEntity, 'id'>>
  ): Promise<AppAnotherEntity> {
    const dbAnotherEntity = await this.anotherEntityRepository.update(
      new ObjectId(id),
      appAnotherEntityToDbAnotherEntityWithoutIdPartial(appAnotherEntity)
    );
    return dbAnotherEntityToAppAnotherEntity(dbAnotherEntity);
  }

  public async remove(id: string): Promise<void> {
    await this.anotherEntityRepository.remove(new ObjectId(id));
  }
}

export function dbAnotherEntityToAppAnotherEntity(
  dbAnotherEntity: DbAnotherEntity
): AppAnotherEntity {
  return {
    id: dbAnotherEntity._id.toString(),
    field: dbAnotherEntity.field,
  };
}

export function appAnotherEntityToDbAnotherEntity(
  appAnotherEntity: AppAnotherEntity
): DbAnotherEntity {
  return {
    _id: new ObjectId(appAnotherEntity.id),
    ...appAnotherEntityToDbAnotherEntityWithoutId(appAnotherEntity),
  };
}

export function appAnotherEntityToDbAnotherEntityWithoutId(
  appAnotherEntity: Except<AppAnotherEntity, 'id'>
): Except<DbAnotherEntity, '_id'> {
  return {
    field: appAnotherEntity.field,
  };
}

export function appAnotherEntityToDbAnotherEntityWithoutIdPartial(
  appAnotherEntity: Partial<Except<AppAnotherEntity, 'id'>>
): Partial<Except<DbAnotherEntity, '_id'>> {
  return objectRemoveUndefined({
    field: appAnotherEntity.field,
  });
}
