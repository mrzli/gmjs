import { schemaTo<%= className %>Code } from './schema-to-<%= fileName %>-code';
import path from 'path';
import {
  SchemaTo<%= className %>CodeInitialFiles,
  SchemaTo<%= className %>CodeInput,
} from './schema-to-<%= fileName %>-code-input';
import { readJsonSync, readTextSync } from '@gmjs/fs-util';
import { MongoJsonSchemaTypeObject } from '@gmjs/mongo-util';
import {
  createCodeFileComparisonStrings,
  createCodeFileExpected,
} from '../../shared/test-util';

describe('schema-to-<%= fileName %>-code', () => {
  it('schemaTo<%= className %>Code()', () => {
    const testDir = path.join(__dirname, 'test-assets');

    const input = createInput(testDir);
    const actual = schemaTo<%= className %>Code(input);
    const expected = createCodeFileExpected(testDir);

    const { expectedString, actualString } = createCodeFileComparisonStrings(
      actual,
      expected
    );

    expect(actualString).toEqual(expectedString);
  });
});

function createInput(testDir: string): SchemaTo<%= className %>CodeInput {
  const schemas = readJsonSync<readonly MongoJsonSchemaTypeObject[]>(
    path.join(testDir, 'input/schemas.json')
  );
  const initialFiles: SchemaTo<%= className %>CodeInitialFiles = {
    input: readTextSync(path.join(testDir, 'input/input.ts.txt')),
  };

  return {
    schemas,
    initialFiles,
    options: {
      someOption: false,
    },
  };
}
